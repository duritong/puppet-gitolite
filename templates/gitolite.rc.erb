# configuration variables for gitolite

# This file is in perl syntax.  But you do NOT need to know perl to edit it --
# just mind the commas, use single quotes unless you know what you're doing,
# and make sure the brackets and braces stay matched up!

# (Tip: perl allows a comma after the last item in a list also!)

# HELP for commands (see COMMANDS list below) can be had by running the
# command with "-h" as the sole argument.

# HELP for all the other external programs (the syntactic sugar helpers and
# the various programs/functions in the 8 trigger lists), can be found in
# doc/non-core.mkd (http://sitaramc.github.com/gitolite/non-core.html) or in
# the corresponding source file itself.

%RC = (
    # if you're using mirroring, you need a hostname.  This is *one* simple
    # word, not a full domain name.  See documentation if in doubt
    # HOSTNAME                  =>  'darkstar',
    UMASK                       =>  <%= rc['umask'] %>,

<% if cgit -%>
    HTTP_ANON_USER              => 'daemon',
    HTPASSWD_FILE               => '/var/www/git_htpasswds/<%= git_vhost %>/htpasswd',
<% end -%>
    # look in the "GIT-CONFIG" section in the README for what to do
    GIT_CONFIG_KEYS             =>  '<%= (rc['git_config_keys']|rc['extra_git_config_keys']).join(' ') %>',

    # comment out if you don't need all the extra detail in the logfile
<% if rc['log_extra'] -%>
    LOG_EXTRA                   =>  1,
<% else -%>
    #LOG_EXTRA                   =>  1,
<% end -%>

    # settings used by external programs; uncomment and change as needed.  You
    # can add your own variables for use in your own external programs; take a
    # look at the info and desc commands for perl and shell samples.

    # used by the CpuTime trigger
    # DISPLAY_CPU_TIME          =>  1,
    # CPU_TIME_WARN_LIMIT       =>  0.1,
    # used by the desc command
    # WRITER_CAN_UPDATE_DESC    =>  1,
    # used by the info command
    # SITE_INFO                 =>  'Please see http://blahblah/gitolite for more help',
<% rc['external_settings'].each do |k,v| -%>
    <%= k.upcase %> => <%= v %>,
<% end -%>

    # add more roles (like MANAGER, TESTER, ...) here.
    #   WARNING: if you make changes to this hash, you MUST run 'gitolite
    #   compile' afterward, and possibly also 'gitolite trigger POST_COMPILE'
    ROLES                       =>
        {
            READERS             =>  1,
            WRITERS             =>  1,
        },
    # uncomment (and change) this if you wish
    # DEFAULT_ROLE_PERMS          =>  'READERS @all',

    # comment out or uncomment as needed
    # these are available to remote users
    COMMANDS                    =>
        {
<% (rc['commands']|rc['extra_commands']).each do |cmd| -%>
            '<%= cmd %>'        => 1,
<% end -%>
        },

    # comment out or uncomment as needed
    # these will run in sequence during the conf file parse
    SYNTACTIC_SUGAR             =>
        [
            # 'continuation-lines',
            # 'keysubdirs-as-groups',
<% rc['syntactic_sugar'].each do |cmd| -%>
              '<%= cmd %>',
<% end -%>
        ],

    # comment out or uncomment as needed
    # these will run in sequence to modify the input (arguments and environment)
    INPUT                       =>
        [
            # 'CpuTime::input',
            # 'Shell::input',
            # 'Alias::input',
            # 'Mirroring::input',
<% rc['input'].each do |cmd| -%>
              '<%= cmd %>',
<% end -%>
        ],

    # comment out or uncomment as needed
    # these will run in sequence just after the first access check is done
    ACCESS_1                    =>
        [
<% rc['access_1'].each do |cmd| -%>
              '<%= cmd %>',
<% end -%>
        ],

    # comment out or uncomment as needed
    # these will run in sequence just before the actual git command is invoked
    PRE_GIT                     =>
        [
            # 'renice 10',
            # 'Mirroring::pre_git',
            # 'partial-copy',
<% rc['pre_git'].each do |cmd| -%>
              '<%= cmd %>',
<% end -%>
        ],

    # comment out or uncomment as needed
    # these will run in sequence just after the second access check is done
    ACCESS_2                    =>
        [
<% rc['access_2'].each do |cmd| -%>
              '<%= cmd %>',
<% end -%>
        ],

    # comment out or uncomment as needed
    # these will run in sequence after the git command returns
    POST_GIT                    =>
        [
            # 'Mirroring::post_git',
            # 'CpuTime::post_git',
<% rc['post_git'].each do |cmd| -%>
              '<%= cmd %>',
<% end -%>
        ],

    # comment out or uncomment as needed
    # these will run in sequence before a new wild repo is created
    PRE_CREATE                  =>
        [
<% rc['pre_create'].each do |cmd| -%>
              '<%= cmd %>',
<% end -%>
        ],

    # comment out or uncomment as needed
    # these will run in sequence after a new repo is created
    POST_CREATE                 =>
        [
<% (rc['post_create']|rc['extra_post_create']).each do |cmd| -%>
              '<%= cmd %>',
<% end -%>
        ],

    # comment out or uncomment as needed
    # these will run in sequence after post-update
    POST_COMPILE                =>
        [
<% (rc['post_compile']|rc['extra_post_compile']).each do |cmd| -%>
              '<%= cmd %>',
<% end -%>
        ],
<% if rc['local_code'] && (rc['local_code'] != 'absent') -%>

     # extra code for gitolite
     LOCAL_CODE                 => '<%= rc['local_code'] %>',

<% end -%>
);
# ------------------------------------------------------------------------------
# per perl rules, this should be the last line in such a file:
1;

# Local variables:
# mode: perl
# End:
# vim: set syn=perl:

